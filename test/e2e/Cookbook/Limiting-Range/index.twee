:: StoryTitle
Limiting the range of a number in Snowman


:: StoryData
{
    "ifid": "EE17F5C7-7EBF-4E70-A0F9-7B3DDB86C399"
}
:: UserScript [script]
(function () {

	/*
		Returns the number clamped to the specified bounds.

		Usage:
			→ Limit numeric variable to a value between 1 and 10 inclusive.
			<% s.variable = s.variable.clamp(1, 10) %>
	*/
	Object.defineProperty(Number.prototype, 'clamp', {
		configurable : true,
		writable     : true,

		value(/* min, max */) {
			if (this == null) { // lazy equality for null
				throw new TypeError('Number.prototype.clamp called on null or undefined');
			}

			if (arguments.length !== 2) {
				throw new Error('Number.prototype.clamp called with an incorrect number of parameters');
			}

			var min = Number(arguments[0]);
			var max = Number(arguments[1]);

			if (min > max) {
				var tmp = min;
				min = max;
				max = tmp;
			}

			return Math.min(Math.max(this, min), max);
		}
	});


	/*
		Returns the given numerical clamped to the specified bounds.

		Usage:
			→ Limit numeric variable to a value between 1 and 10 inclusive.
			<% s.variable = Math.clamp(s.variable, 1, 10) %>

			→ Limit result of mathematical operation to a value between 1 and 10 inclusive.
			<% s.variable = Math.clamp(s.variable + 5, 1, 10) %>
	*/
	Object.defineProperty(Math, 'clamp', {
		configurable : true,
		writable     : true,

		value(num, min, max) {
			var value = Number(num);
			return Number.isNaN(value) ? NaN : value.clamp(min, max);
		}
	});

})();

:: Start
Initialize the numeric variable to a value with the range you want.<br>
eg. between <b>1</b> and <b>10</b> inclusive.<br>
&#40;note: You don't need to use the <i>Math.clamp()</i> function at this point.&#41;<br>

<% s.valueToClamp = 5 %>
